apiVersion: apps/v1
kind: Deployment
metadata:
  name: config-server
  namespace: network-system
  labels:
    app.kubernetes.io/name: config-server
spec:
  strategy:
    type: Recreate
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: config-server
  template:
    metadata:
      labels:
        app.kubernetes.io/name: config-server
        sdcio.dev/data-server: "true"
    spec:
      securityContext:
        runAsUser: 10000
        runAsGroup: 10000
        fsGroup: 10000
      serviceAccountName: config-server
      containers:
      - name: config-server
        image: input.context[0].data.configServerImage
        imagePullPolicy: Always
        command:
        - /app/config-server
        args:
        - "--tls-cert-file=/apiserver.local.config/certificates/tls.crt"
        - "--tls-private-key-file=/apiserver.local.config/certificates/tls.key"
        #- "--feature-gates=APIPriorityAndFairness=false"
        - "--audit-log-path=-"
        - "--audit-log-maxage=0"
        - "--audit-log-maxbackup=0"
        - "--secure-port=6443"
        ports:
        - name: api-service
          containerPort: 6443
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: "NODE_NAME"
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: "NODE_IP"
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: PPROF_PORT
          value: "8081"
        - name: REVERTIVE
          value: "true"
        - name: ENABLE_SUBSCRIPTION
          value: "true"
        - name: ENABLE_TARGET
          value: "true"
        - name: ENABLE_TARGETDATASTORE
          value: "true"
        - name: ENABLE_TARGETCONFIGSERVER
          value: "true"
        - name: ENABLE_DISCOVERYRULE
          value: "true"
        - name: ENABLE_SCHEMA
          value: "true"
        - name: ENABLE_CONFIG
          value: "true"
        - name: ENABLE_CONFIGSET
          value: "true"
        - name: ENABLE_WORKSPACE
          value: "true"
        - name: ENABLE_ROLLOUT
          value: "true"
        volumeMounts:
        - name: apiserver-certs
          mountPath: /apiserver.local.config/certificates
          readOnly: true
        - name: config-store
          mountPath: /config
        - name: schema-store
          mountPath: /schemas
        - name: workspace-store
          mountPath: /workspace
      - name: data-server
        image: input.context[0].data.dataServerImage
        imagePullPolicy: Always
        command:
        - /app/data-server
        args:
        - "--config=/config/data-server.yaml"
        ports:
        - name: data-service
          containerPort: 56000
        volumeMounts:
        - name: data-server-config
          mountPath: /config
        - name: cache
          mountPath: /cached/caches
        - name: schema-store
          mountPath: /schemas
        - name: schema-db
          mountPath: /schemadb
      volumes:
      - name: data-server-config
        configMap:
          name: data-server
      - name: apiserver-certs
        secret:
          secretName: config-server-cert
      - name: cache
        emptyDir:
          sizeLimit: 10Gi
      - name: config-store
        persistentVolumeClaim:
          claimName: pvc-config-store
      - name: schema-store # yang file from git
        persistentVolumeClaim:
          claimName: pvc-schema-store
      - name: schema-db # persistent schema obj from the parsed yang files
        persistentVolumeClaim:
          claimName: pvc-schema-db
      - name: workspace-store # git workspace
        persistentVolumeClaim:
          claimName: pvc-workspace-store
