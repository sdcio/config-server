/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	configv1alpha1 "github.com/sdcio/config-server/apis/config/v1alpha1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// SensitiveConfigLister helps list SensitiveConfigs.
// All objects returned here must be treated as read-only.
type SensitiveConfigLister interface {
	// List lists all SensitiveConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*configv1alpha1.SensitiveConfig, err error)
	// SensitiveConfigs returns an object that can list and get SensitiveConfigs.
	SensitiveConfigs(namespace string) SensitiveConfigNamespaceLister
	SensitiveConfigListerExpansion
}

// sensitiveConfigLister implements the SensitiveConfigLister interface.
type sensitiveConfigLister struct {
	listers.ResourceIndexer[*configv1alpha1.SensitiveConfig]
}

// NewSensitiveConfigLister returns a new SensitiveConfigLister.
func NewSensitiveConfigLister(indexer cache.Indexer) SensitiveConfigLister {
	return &sensitiveConfigLister{listers.New[*configv1alpha1.SensitiveConfig](indexer, configv1alpha1.Resource("sensitiveconfig"))}
}

// SensitiveConfigs returns an object that can list and get SensitiveConfigs.
func (s *sensitiveConfigLister) SensitiveConfigs(namespace string) SensitiveConfigNamespaceLister {
	return sensitiveConfigNamespaceLister{listers.NewNamespaced[*configv1alpha1.SensitiveConfig](s.ResourceIndexer, namespace)}
}

// SensitiveConfigNamespaceLister helps list and get SensitiveConfigs.
// All objects returned here must be treated as read-only.
type SensitiveConfigNamespaceLister interface {
	// List lists all SensitiveConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*configv1alpha1.SensitiveConfig, err error)
	// Get retrieves the SensitiveConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*configv1alpha1.SensitiveConfig, error)
	SensitiveConfigNamespaceListerExpansion
}

// sensitiveConfigNamespaceLister implements the SensitiveConfigNamespaceLister
// interface.
type sensitiveConfigNamespaceLister struct {
	listers.ResourceIndexer[*configv1alpha1.SensitiveConfig]
}
