/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	invv1alpha1 "github.com/sdcio/config-server/apis/inv/v1alpha1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// TargetLister helps list Targets.
// All objects returned here must be treated as read-only.
type TargetLister interface {
	// List lists all Targets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*invv1alpha1.Target, err error)
	// Targets returns an object that can list and get Targets.
	Targets(namespace string) TargetNamespaceLister
	TargetListerExpansion
}

// targetLister implements the TargetLister interface.
type targetLister struct {
	listers.ResourceIndexer[*invv1alpha1.Target]
}

// NewTargetLister returns a new TargetLister.
func NewTargetLister(indexer cache.Indexer) TargetLister {
	return &targetLister{listers.New[*invv1alpha1.Target](indexer, invv1alpha1.Resource("target"))}
}

// Targets returns an object that can list and get Targets.
func (s *targetLister) Targets(namespace string) TargetNamespaceLister {
	return targetNamespaceLister{listers.NewNamespaced[*invv1alpha1.Target](s.ResourceIndexer, namespace)}
}

// TargetNamespaceLister helps list and get Targets.
// All objects returned here must be treated as read-only.
type TargetNamespaceLister interface {
	// List lists all Targets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*invv1alpha1.Target, err error)
	// Get retrieves the Target from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*invv1alpha1.Target, error)
	TargetNamespaceListerExpansion
}

// targetNamespaceLister implements the TargetNamespaceLister
// interface.
type targetNamespaceLister struct {
	listers.ResourceIndexer[*invv1alpha1.Target]
}
