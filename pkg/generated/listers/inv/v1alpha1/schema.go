/*
Copyright 2024 Nokia.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	invv1alpha1 "github.com/sdcio/config-server/apis/inv/v1alpha1"
	labels "k8s.io/apimachinery/pkg/labels"
	listers "k8s.io/client-go/listers"
	cache "k8s.io/client-go/tools/cache"
)

// SchemaLister helps list Schemas.
// All objects returned here must be treated as read-only.
type SchemaLister interface {
	// List lists all Schemas in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*invv1alpha1.Schema, err error)
	// Schemas returns an object that can list and get Schemas.
	Schemas(namespace string) SchemaNamespaceLister
	SchemaListerExpansion
}

// schemaLister implements the SchemaLister interface.
type schemaLister struct {
	listers.ResourceIndexer[*invv1alpha1.Schema]
}

// NewSchemaLister returns a new SchemaLister.
func NewSchemaLister(indexer cache.Indexer) SchemaLister {
	return &schemaLister{listers.New[*invv1alpha1.Schema](indexer, invv1alpha1.Resource("schema"))}
}

// Schemas returns an object that can list and get Schemas.
func (s *schemaLister) Schemas(namespace string) SchemaNamespaceLister {
	return schemaNamespaceLister{listers.NewNamespaced[*invv1alpha1.Schema](s.ResourceIndexer, namespace)}
}

// SchemaNamespaceLister helps list and get Schemas.
// All objects returned here must be treated as read-only.
type SchemaNamespaceLister interface {
	// List lists all Schemas in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*invv1alpha1.Schema, err error)
	// Get retrieves the Schema from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*invv1alpha1.Schema, error)
	SchemaNamespaceListerExpansion
}

// schemaNamespaceLister implements the SchemaNamespaceLister
// interface.
type schemaNamespaceLister struct {
	listers.ResourceIndexer[*invv1alpha1.Schema]
}
